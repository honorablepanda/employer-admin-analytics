File name: backupProjectCode.js

Code:
// backupProjectCode.js
const fs = require("fs");
const path = require("path");

const OUTPUT_FOLDER = "code-backups";
const MAX_CHARACTERS_PER_FILE = 500000; // ~500KB target size per file

const ALLOWED_EXTENSIONS = [".js", ".jsx", ".json", ".html", ".css", ".ts", ".tsx", ".txt", ".md"];

let bundles = [];
let currentBundle = "";
let bundleIndex = 1;

function collectFiles(dir) {
  const items = fs.readdirSync(dir, { withFileTypes: true });

  items.forEach((item) => {
    const fullPath = path.join(dir, item.name);

    if (item.isDirectory()) {
      collectFiles(fullPath);
    } else {
      const ext = path.extname(item.name).toLowerCase();
      if (ALLOWED_EXTENSIONS.includes(ext)) {
        const code = fs.readFileSync(fullPath, "utf8");

        const entry = `File name: ${path.relative(".", fullPath)}\n\nCode:\n${code}\n\n---\n\n`;

        if (currentBundle.length + entry.length > MAX_CHARACTERS_PER_FILE) {
          bundles.push(currentBundle);
          currentBundle = "";
        }

        currentBundle += entry;
      }
    }
  });
}

function writeBundles() {
  if (currentBundle) bundles.push(currentBundle);
  fs.mkdirSync(OUTPUT_FOLDER, { recursive: true });

  bundles.forEach((content, i) => {
    const filePath = path.join(OUTPUT_FOLDER, `code-bundle-${i + 1}.txt`);
    fs.writeFileSync(filePath, content, "utf8");
    console.log(`âœ… Saved ${filePath}`);
  });
}

console.log("ðŸ“¦ Backing up project code files...");
collectFiles(".");
writeBundles();
console.log("âœ… Done. Code backups saved in:", OUTPUT_FOLDER);


---

File name: backupProjectStructure.js

Code:
// backupProjectStructure.js
const fs = require("fs");
const path = require("path");

const OUTPUT_FOLDER = "structure-backups";
const MAX_LINES_PER_FILE = 4000; // Adjust if needed for ChatGPT

const outputLines = [];

function walk(dir, prefix = "") {
  const items = fs.readdirSync(dir, { withFileTypes: true });
  items.forEach((item, idx) => {
    const isLast = idx === items.length - 1;
    const connector = isLast ? "â””â”€â”€ " : "â”œâ”€â”€ ";
    outputLines.push(`${prefix}${connector}${item.name}`);

    if (item.isDirectory()) {
      walk(path.join(dir, item.name), prefix + (isLast ? "    " : "â”‚   "));
    }
  });
}

function writeChunks() {
  fs.mkdirSync(OUTPUT_FOLDER, { recursive: true });

  let part = 1;
  for (let i = 0; i < outputLines.length; i += MAX_LINES_PER_FILE) {
    const chunk = outputLines.slice(i, i + MAX_LINES_PER_FILE).join("\n");
    const filePath = path.join(OUTPUT_FOLDER, `project-structure-part${part}.txt`);
    fs.writeFileSync(filePath, chunk, "utf8");
    console.log(`âœ… Saved ${filePath}`);
    part++;
  }
}

console.log("ðŸ“‚ Backing up project folder structure...");
walk(".");
writeChunks();
console.log("âœ… Done. Structure backups saved in:", OUTPUT_FOLDER);


---

File name: code-backups\code-bundle-1.txt

Code:
File name: backupProjectCode.js

Code:
// backupProjectCode.js
const fs = require("fs");
const path = require("path");

const OUTPUT_FOLDER = "code-backups";
const MAX_CHARACTERS_PER_FILE = 500000; // ~500KB target size per file

const ALLOWED_EXTENSIONS = [
  ".js",
  ".jsx",
  ".json",
  ".html",
  ".css",
  ".ts",
  ".tsx",
  ".txt",
  ".md",
];

let bundles = [];
let currentBundle = "";
let bundleIndex = 1;

function collectFiles(dir) {
  const items = fs.readdirSync(dir, { withFileTypes: true });

  items.forEach((item) => {
    const fullPath = path.join(dir, item.name);

    if (item.isDirectory()) {
      collectFiles(fullPath);
    } else {
      const ext = path.extname(item.name).toLowerCase();
      if (ALLOWED_EXTENSIONS.includes(ext)) {
        const code = fs.readFileSync(fullPath, "utf8");

        const entry = `File name: ${path.relative(".", fullPath)}\n\nCode:\n${code}\n\n---\n\n`;

        if (currentBundle.length + entry.length > MAX_CHARACTERS_PER_FILE) {
          bundles.push(currentBundle);
          currentBundle = "";
        }

        currentBundle += entry;
      }
    }
  });
}

function writeBundles() {
  if (currentBundle) bundles.push(currentBundle);
  fs.mkdirSync(OUTPUT_FOLDER, { recursive: true });

  bundles.forEach((content, i) => {
    const filePath = path.join(OUTPUT_FOLDER, `code-bundle-${i + 1}.txt`);
    fs.writeFileSync(filePath, content, "utf8");
    console.log(`âœ… Saved ${filePath}`);
  });
}

console.log("ðŸ“¦ Backing up project code files...");
collectFiles(".");
writeBundles();
console.log("âœ… Done. Code backups saved in:", OUTPUT_FOLDER);


---

File name: backupProjectStructure.js

Code:
// backupProjectStructure.js
const fs = require("fs");
const path = require("path");

const OUTPUT_FOLDER = "structure-backups";
const MAX_LINES_PER_FILE = 4000; // Adjust if needed for your environment

const outputLines = [];

function walk(dir, prefix = "") {
  const items = fs.readdirSync(dir, { withFileTypes: true });
  items.forEach((item, idx) => {
    const isLast = idx === items.length - 1;
    const connector = isLast ? "â””â”€â”€ " : "â”œâ”€â”€ ";
    outputLines.push(`${prefix}${connector}${item.name}`);

    if (item.isDirectory()) {
      walk(path.join(dir, item.name), prefix + (isLast ? "    " : "â”‚   "));
    }
  });
}

function writeChunks() {
  fs.mkdirSync(OUTPUT_FOLDER, { recursive: true });

  let part = 1;
  for (let i = 0; i < outputLines.length; i += MAX_LINES_PER_FILE) {
    const chunk = outputLines.slice(i, i + MAX_LINES_PER_FILE).join("\n");
    const filePath = path.join(OUTPUT_FOLDER, `project-structure-part${part}.txt`);
    fs.writeFileSync(filePath, chunk, "utf8");
    console.log(`âœ… Saved ${filePath}`);
    part++;
  }
}

console.log("ðŸ“‚ Backing up project folder structure...");
walk(".");
writeChunks();
console.log("âœ… Done. Structure backups saved in:", OUTPUT_FOLDER);


---

File name: components\AdminAnalytics.jsx

Code:
import React, { useState, useEffect } from "react";
import { motion, useAnimation } from "framer-motion";
import { useInView } from "react-intersection-observer";
import useEmployerAdminMockData from "../hooks/useEmployerAdminMockData";
import AdminDataChat from "./AdminDataChat";
import KPICard from "./KPICard";
import InsightCard from "./InsightCard";
import NudgeCard from "./NudgeCard";
import ProgressBar from "./ProgressBar";
import PersonaToggle from "./PersonaToggle";
import ApplicationsOverTimeChart from "./ApplicationsOverTimeChart";

const badges = [
  { id: 1, name: "First Action", threshold: 10 },
  { id: 2, name: "Rising Star", threshold: 50 },
  { id: 3, name: "Super Admin", threshold: 100 },
];

// Existing personaData object goes here (keep it as in your project)

export default function AdminAnalytics() {
  const data = useEmployerAdminMockData();
  if (!data) {
    return <div>Loading...</div>;
  }

  const controls = useAnimation();
  const [ref, inView] = useInView({ triggerOnce: true });
  const [toast, setToast] = useState("");
  const [persona, setPersona] = useState("employer");
  const [showBenchmark, setShowBenchmark] = useState(false);
  const [selectedDateIndex, setSelectedDateIndex] = useState(2); // latest by default
  const [xp, setXp] = useState(0);
  const [showCelebration, setShowCelebration] = useState(false);

  const incrementXp = (amount = 10) => {
    setXp((prevXp) => {
      const newXp = prevXp + amount;
      const justReachedBadge = badges.find((b) => b.threshold === newXp);
      if (justReachedBadge) {
        setShowCelebration(true);
        setTimeout(() => setShowCelebration(false), 2000);
      }
      return newXp;
    });
  };

  useEffect(() => {
    if (inView) {
      controls.start("visible");
    }
  }, [controls, inView]);

  const personaObj = personaData[persona];
  const { title, timeSeries, insights, benchmarks, nudges } = personaObj;
  const kpis = timeSeries[selectedDateIndex].kpis;

  const narrative = `Welcome to the ${title}. Showing data for ${timeSeries[selectedDateIndex].date}. Benchmark comparison is ${
    showBenchmark ? "ON" : "OFF"
  }.`;

  const handleActionClick = (actionLabel) => {
    setToast(`Action "${actionLabel}" triggered! (Backend wiring coming soon)`);
    incrementXp(10);
    setTimeout(() => setToast(""), 3000);
  };

  return (
    <div
      style={{
        padding: "2rem 1rem",
        fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
        maxWidth: 900,
        margin: "auto",
        color: "#222",
        lineHeight: 1.5,
      }}
    >
      <h1 tabIndex={0} style={{ fontWeight: "700", fontSize: "2rem", marginBottom: "1rem" }}>
        {title}
      </h1>

      <PersonaToggle
        persona={persona}
        setPersona={setPersona}
        showBenchmark={showBenchmark}
        setShowBenchmark={setShowBenchmark}
      />

      {/* Timeline scroller */}
      <div
        style={{
          display: "flex",
          overflowX: "auto",
          gap: "1rem",
          paddingBottom: "1rem",
          marginBottom: "2rem",
          borderBottom: "1px solid #ddd",
        }}
      >
        {timeSeries.map((point, idx) => (
          <button
            key={point.date}
            onClick={() => setSelectedDateIndex(idx)}
            style={{
              padding: "0.5rem 1rem",
              borderRadius: 6,
              border: idx === selectedDateIndex ? "2px solid #007bff" : "1px solid #ccc",
              background: idx === selectedDateIndex ? "#e7f0fe" : "#f9f9f9",
              cursor: "pointer",
              whiteSpace: "nowrap",
            }}
          >
            {point.date}
          </button>
        ))}
      </div>

      <motion.div
        ref={ref}
        initial="hidden"
        animate={controls}
        style={{ display: "flex", gap: "1rem", marginTop: "1rem", flexWrap: "wrap", justifyContent: "center" }}
      >
        {kpis.map((kpi, index) => (
          <KPICard
            key={kpi.label}
            label={kpi.label}
            value={kpi.value}
            suffix={kpi.suffix}
            benchmark={benchmarks[index]?.value}
            showBenchmark={showBenchmark}
            index={index}
          />
        ))}
      </motion.div>

      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: kpis.length * 0.3 + 0.5, duration: 1 }}
        style={{
          marginTop: "2rem",
          background: "#e8f0fe",
          padding: "1rem 1.5rem",
          borderRadius: 6,
          fontStyle: "italic",
          color: "#333",
          boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
        }}
        tabIndex={0}
        aria-live="polite"
      >
        {narrative}
      </motion.div>

      <section style={{ marginTop: "2rem" }}>
        <h2 tabIndex={0}>Actionable Insights</h2>
        <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
          {insights.map((insight, index) => (
            <InsightCard
              key={insight.id}
              insight={insight}
              index={index}
              onActionClick={handleActionClick}
            />
          ))}
        </div>
      </section>

      <section style={{ marginTop: "2rem" }}>
        <h2 tabIndex={0}>Nudge Engine</h2>
        <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
          {nudges.map((nudge, index) => (
            <NudgeCard key={nudge.id} nudge={nudge} index={index} onActionClick={handleActionClick} />
          ))}
        </div>
      </section>

      <section style={{ marginTop: "2rem" }}>
        <h2 tabIndex={0}>Admin Progress</h2>
        <ProgressBar xp={xp} showCelebration={showCelebration} />
        <p>
          XP: {xp} / 100{" "}
          {showCelebration && (
            <span role="img" aria-label="celebration">
              ðŸŽ‰
            </span>
          )}
        </p>
        <div style={{ display: "flex", gap: 8 }}>
          {badges
            .filter((badge) => xp >= badge.threshold)
            .map((badge) => (
              <div
                key={badge.id}
                style={{
                  padding: "0.25rem 1rem",
                  backgroundColor: "#007bff",
                  color: "white",
                  borderRadius: 12,
                }}
                title={`Badge: ${badge.name}`}
              >
                {badge.name}
              </div>
            ))}
        </div>
      </section>

      {toast && (
        <div
          style={{
            position: "fixed",
            bottom: 20,
            right: 20,
            background: "#333",
            color: "white",
            padding: "0.8rem 1.2rem",
            borderRadius: 4,
            boxShadow: "0 2px 6px rgba(0,0,0,0.3)",
          }}
          role="alert"
          aria-live="assertive"
        >
          {toast}
        </div>
      )}

      
<section style={{ marginTop: "2rem" }}>
  <h2 tabIndex={0}>Applications Over Time</h2>
  <ApplicationsOverTimeChart data={data.timeSeries} />
</section>


      <AdminDataChat />
    </div>
  );
}


---

File name: components\AdminDataChat.jsx

Code:
import React, { useState } from "react";

const fakeResponses = {
  "show me student applications": "Currently, there are 320 student applications this month.",
  "how many active employers": "We have 45 active employers engaged right now.",
  "average time to hire": "The average time to hire is 27 days across all job posts.",
  "job post visibility": "Job post visibility dropped by 12% compared to last month.",
};

export default function AdminDataChat() {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([
    { from: "bot", text: "Hi! Ask me about the Employer & Admin Analytics data." },
  ]);

  const handleSend = () => {
    if (!input.trim()) return;

    const userMessage = { from: "user", text: input.trim() };
    setMessages((msgs) => [...msgs, userMessage]);

    // Simulate backend response delay
    setTimeout(() => {
      const lowerInput = input.toLowerCase();
      const botReply =
        Object.keys(fakeResponses).find((key) => lowerInput.includes(key)) || null;

      const botMessage = {
        from: "bot",
        text: botReply ? fakeResponses[botReply] : "Sorry, I don't have an answer for that yet.",
      };

      setMessages((msgs) => [...msgs, botMessage]);
    }, 1000);

    setInput("");
  };

  return (
    <div
      style={{
        border: "1px solid #ddd",
        borderRadius: 6,
        padding: "1rem",
        maxWidth: 500,
        marginTop: "2rem",
        fontFamily: "Arial, sans-serif",
      }}
    >
      <h3>Admin Data Chat Assistant</h3>
      <div
        style={{
          height: 200,
          overflowY: "auto",
          border: "1px solid #ccc",
          padding: "0.5rem",
          borderRadius: 4,
          marginBottom: "1rem",
          backgroundColor: "#fafafa",
        }}
      >
        {messages.map((msg, idx) => (
          <div
            key={idx}
            style={{
              marginBottom: "0.5rem",
              textAlign: msg.from === "user" ? "right" : "left",
            }}
          >
            <span
              style={{
                display: "inline-block",
                padding: "0.4rem 0.8rem",
                borderRadius: 12,
                backgroundColor: msg.from === "user" ? "#007bff" : "#eee",
                color: msg.from === "user" ? "white" : "black",
                maxWidth: "80%",
              }}
            >
              {msg.text}
            </span>
          </div>
        ))}
      </div>
      <input
        type="text"
        placeholder="Ask a question..."
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") handleSend();
        }}
        style={{ width: "100%", padding: "0.5rem", borderRadius: 4, border: "1px solid #ccc" }}
      />
      <button
        onClick={handleSend}
        style={{
          marginTop: "0.5rem",
          padding: "0.5rem 1rem",
          backgroundColor: "#007bff",
          color: "white",
          border: "none",
          borderRadius: 4,
          cursor: "pointer",
        }}
      >
        Send
      </button>
    </div>
  );
}


---

File name: components\ApplicationsOverTimeChart.jsx

Code:
import React from "react";
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";

export default function ApplicationsOverTimeChart({ data }) {
  return (
    <ResponsiveContainer width="100%" height={250}>
      <LineChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
        <XAxis dataKey="date" />
        <YAxis />
        <Tooltip />
        <Line type="monotone" dataKey="applications" stroke="#8884d8" strokeWidth={2} />
      </LineChart>
    </ResponsiveContainer>
  );
}


---

File name: components\InsightCard.jsx

Code:
import React from "react";
import { motion } from "framer-motion";
import PropTypes from "prop-types";

const insightVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: (i) => ({
    opacity: 1,
    y: 0,
    transition: { delay: i * 0.4, duration: 0.6 },
  }),
};

export default function InsightCard({ insight, index, onActionClick }) {
  return (
    <motion.div
      custom={index}
      variants={insightVariants}
      initial="hidden"
      animate="visible"
      style={{
        padding: "1rem",
        background: "#fff",
        borderRadius: 6,
        boxShadow: "0 1px 4px rgba(0,0,0,0.1)",
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
      }}
      role="region"
      aria-label={insight.text}
    >
      <p style={{ margin: 0 }}>{insight.text}</p>
      <button
        onClick={() => onActionClick(insight.actionLabel)}
        style={{
          background: "#007bff",
          color: "white",
          border: "none",
          borderRadius: 4,
          padding: "0.5rem 1rem",
          cursor: "pointer",
        }}
        aria-label={`Action: ${insight.actionLabel}`}
      >
        {insight.actionLabel}
      </button>
    </motion.div>
  );
}

InsightCard.propTypes = {
  insight: PropTypes.shape({
    id: PropTypes.number.isRequired,
    text: PropTypes.string.isRequired,
    actionLabel: PropTypes.string.isRequired,
  }).isRequired,
  index: PropTypes.number.isRequired,
  onActionClick: PropTypes.func.isRequired,
};


---

File name: components\KPICard.jsx

Code:
import React from "react";
import CountUp from "react-countup";
import { motion } from "framer-motion";
import PropTypes from "prop-types";

const kpiVariants = {
  hidden: { opacity: 0, x: -50 },
  visible: (i) => ({
    opacity: 1,
    x: 0,
    transition: { delay: i * 0.3, duration: 0.6 },
  }),
};

export default function KPICard({ label, value, suffix, benchmark, showBenchmark, index }) {
  return (
    <motion.div
      custom={index}
      variants={kpiVariants}
      initial="hidden"
      animate="visible"
      whileHover={{ scale: 1.05, boxShadow: "0 0 15px rgba(0,123,255,0.6)" }}
      tabIndex={0}
      role="region"
      aria-label={`${label}: ${value}${suffix || ""}`}
      style={{
        background: "#f0f4f8",
        padding: "1rem 2rem",
        borderRadius: 8,
        flex: "1 1 40%",
        boxShadow: "0 2px 6px rgba(0,0,0,0.1)",
        textAlign: "center",
        cursor: "default",
        userSelect: "none",
        outline: "none",
        position: "relative",
      }}
      onFocus={(e) => (e.currentTarget.style.boxShadow = "0 0 20px #007bff")}
      onBlur={(e) => (e.currentTarget.style.boxShadow = "0 2px 6px rgba(0,0,0,0.1)")}
    >
      <h3 style={{ margin: 0, fontSize: "1.5rem" }}>
        <CountUp start={0} end={value} duration={2} suffix={suffix || ""} separator="," />
      </h3>
      <p style={{ margin: 0, color: "#555" }}>{label}</p>

      {showBenchmark && benchmark !== undefined && (
        <div
          style={{
            position: "absolute",
            top: 10,
            right: 10,
            background: "#007bff",
            color: "white",
            borderRadius: 12,
            padding: "0.2rem 0.5rem",
            fontSize: "0.8rem",
          }}
          title={`Benchmark: ${benchmark}${suffix || ""}`}
        >
          <CountUp start={0} end={benchmark} duration={2} suffix={suffix || ""} separator="," />
        </div>
      )}
    </motion.div>
  );
}

KPICard.propTypes = {
  label: PropTypes.string.isRequired,
  value: PropTypes.number.isRequired,
  suffix: PropTypes.string,
  benchmark: PropTypes.number,
  showBenchmark: PropTypes.bool,
  index: PropTypes.number,
};


---

File name: components\NudgeCard.jsx

Code:
import React from "react";
import { motion } from "framer-motion";
import PropTypes from "prop-types";

const nudgeVariants = {
  hidden: { opacity: 0, scale: 0.95 },
  visible: (i) => ({
    opacity: 1,
    scale: 1,
    transition: { delay: i * 0.3, duration: 0.5 },
  }),
};

export default function NudgeCard({ nudge, index, onActionClick }) {
  return (
    <motion.div
      custom={index}
      variants={nudgeVariants}
      initial="hidden"
      animate="visible"
      style={{
        padding: "1rem",
        background: "#fff9e6",
        borderRadius: 6,
        boxShadow: "0 1px 4px rgba(0,0,0,0.1)",
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        border: "1px solid #f5c518",
      }}
      role="region"
      aria-label={nudge.text}
    >
      <p style={{ margin: 0 }}>{nudge.text}</p>
      <button
        onClick={() => onActionClick(nudge.actionLabel)}
        style={{
          background: "#f5c518",
          color: "#333",
          border: "none",
          borderRadius: 4,
          padding: "0.5rem 1rem",
          cursor: "pointer",
        }}
        aria-label={`Action: ${nudge.actionLabel}`}
      >
        {nudge.actionLabel}
      </button>
    </motion.div>
  );
}

NudgeCard.propTypes = {
  nudge: PropTypes.shape({
    id: PropTypes.number.isRequired,
    text: PropTypes.string.isRequired,
    actionLabel: PropTypes.string.isRequired,
  }).isRequired,
  index: PropTypes.number.isRequired,
  onActionClick: PropTypes.func.isRequired,
};


---

File name: components\PersonaToggle.jsx

Code:
import React from "react";
import PropTypes from "prop-types";

export default function PersonaToggle({ persona, setPersona, showBenchmark, setShowBenchmark }) {
  return (
    <div
      style={{
        marginBottom: "1rem",
        display: "flex",
        flexWrap: "wrap",
        alignItems: "center",
        gap: "1rem",
      }}
    >
      <label htmlFor="persona-select" style={{ fontWeight: "600" }}>
        Select Persona:
      </label>
      <select
        id="persona-select"
        value={persona}
        onChange={(e) => setPersona(e.target.value)}
        style={{
          padding: "0.3rem 0.6rem",
          fontSize: "1rem",
          borderRadius: 4,
          border: "1px solid #ccc",
          outlineOffset: 2,
        }}
        aria-label="Select admin persona"
      >
        <option value="employer">Employer</option>
        <option value="universityAdmin">University Admin</option>
        <option value="careerCenterStaff">Career Center Staff</option>
      </select>

      <label
        htmlFor="benchmark-toggle"
        style={{ fontWeight: "600", cursor: "pointer", userSelect: "none" }}
      >
        <input
          type="checkbox"
          id="benchmark-toggle"
          checked={showBenchmark}
          onChange={() => setShowBenchmark(!showBenchmark)}
          style={{ marginRight: 6, cursor: "pointer" }}
          aria-checked={showBenchmark}
          role="switch"
        />
        Show Benchmark Comparison
      </label>
    </div>
  );
}

PersonaToggle.propTypes = {
  persona: PropTypes.string.isRequired,
  setPersona: PropTypes.func.isRequired,
  showBenchmark: PropTypes.bool.isRequired,
  setShowBenchmark: PropTypes.func.isRequired,
};


---

File name: components\ProgressBar.jsx

Code:
import React from "react";
import PropTypes from "prop-types";
import { motion } from "framer-motion";

export default function ProgressBar({ xp, showCelebration }) {
  return (
    <div
      style={{
        background: "#ddd",
        borderRadius: 20,
        height: 24,
        width: "100%",
        overflow: "hidden",
        marginBottom: 12,
        position: "relative",
      }}
      role="progressbar"
      aria-valuemin={0}
      aria-valuemax={100}
      aria-valuenow={xp}
      aria-label="Admin experience progress"
    >
      <motion.div
        style={{
          height: "100%",
          backgroundColor: showCelebration ? "#ffd700" : "#007bff",
          borderRadius: 20,
          width: `${Math.min(xp, 100)}%`,
        }}
        animate={{ width: `${Math.min(xp, 100)}%` }}
        transition={{ duration: 0.5 }}
      />
    </div>
  );
}

ProgressBar.propTypes = {
  xp: PropTypes.number.isRequired,
  showCelebration: PropTypes.bool,
};


---

File name: hooks\useEmployerAdminMockData.js

Code:
import { useState, useEffect } from "react";
import dummyAdminStats from "../mock/dummyAdminStats.json";

export default function useEmployerAdminMockData() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Simulate async loading delay
    const loadData = async () => {
      // You can simulate a delay here if you want
      setData(dummyAdminStats);
    };

    loadData();
  }, []);

  return data;
}


---

File name: index.jsx

Code:
import React from "react";
import ReactDOM from "react-dom/client";
import AdminAnalytics from "./components/AdminAnalytics";

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(
  <React.StrictMode>
    <AdminAnalytics />
  </React.StrictMode>
);


---

File name: mock\dummyAdminStats.json

Code:
{
  "timeSeries": [
    {
      "date": "2025-01-01",
      "applications": 250,
      "activeEmployers": 38,
      "jobPosts": 95
    },
    {
      "date": "2025-02-01",
      "applications": 270,
      "activeEmployers": 40,
      "jobPosts": 100
    },
    {
      "date": "2025-03-01",
      "applications": 280,
      "activeEmployers": 42,
      "jobPosts": 110
    }
  ],
  "insights": [
    {
      "id": 1,
      "category": "Engagement",
      "text": "Student engagement has increased by 12% in the last month.",
      "urgency": "low"
    },
    {
      "id": 2,
      "category": "Job Posts",
      "text": "Job post visibility is down 8%.",
      "urgency": "high"
    }
  ]
}


---

File name: README.md

Code:
# Employer & Admin Analytics (Part 6)

This folder contains the frontend-only Employer & Admin Analytics module for the Career OS suite.

## Structure

- components/ â€” React components
- hooks/ â€” Custom hooks, including mock data provider
- mock/ â€” Mock data JSON files
- contexts/ â€” Placeholder for future global state context
- utils/ â€” Utility functions for charts, data formatting
- index.jsx â€” Root entry point

## Next Steps

- Implement leapfrog frontend features as per plan
- Expand mock data and visualization components
- Add admin persona toggles and insights feed


---



---

File name: Commands to run backup scripts.txt

Code:
node backupProjectStructure.js
node backupProjectCode.js


---

File name: components\AdminAnalytics.jsx

Code:
import React, { useState, useEffect } from "react";
import { motion, useAnimation } from "framer-motion";
import { useInView } from "react-intersection-observer";
import useEmployerAdminMockData from "../hooks/useEmployerAdminMockData";
import AdminDataChat from "./AdminDataChat";
import KPICard from "./KPICard";
import InsightCard from "./InsightCard";
import NudgeCard from "./NudgeCard";
import ProgressBar from "./ProgressBar";
import PersonaToggle from "./PersonaToggle";
import ApplicationsOverTimeChart from "./ApplicationsOverTimeChart";

const badges = [
  { id: 1, name: "First Action", threshold: 10 },
  { id: 2, name: "Rising Star", threshold: 50 },
  { id: 3, name: "Super Admin", threshold: 100 },
];

// Existing personaData object goes here (keep it as in your project)

export default function AdminAnalytics() {
  const data = useEmployerAdminMockData();
  if (!data) {
    return <div>Loading...</div>;
  }

  const controls = useAnimation();
  const [ref, inView] = useInView({ triggerOnce: true });
  const [toast, setToast] = useState("");
  const [persona, setPersona] = useState("employer");
  const [showBenchmark, setShowBenchmark] = useState(false);
  const [selectedDateIndex, setSelectedDateIndex] = useState(2); // latest by default
  const [xp, setXp] = useState(0);
  const [showCelebration, setShowCelebration] = useState(false);

  const incrementXp = (amount = 10) => {
    setXp((prevXp) => {
      const newXp = prevXp + amount;
      const justReachedBadge = badges.find((b) => b.threshold === newXp);
      if (justReachedBadge) {
        setShowCelebration(true);
        setTimeout(() => setShowCelebration(false), 2000);
      }
      return newXp;
    });
  };

  useEffect(() => {
    if (inView) {
      controls.start("visible");
    }
  }, [controls, inView]);

  const personaObj = personaData[persona];
  const { title, timeSeries, insights, benchmarks, nudges } = personaObj;
  const kpis = timeSeries[selectedDateIndex].kpis;

  const narrative = `Welcome to the ${title}. Showing data for ${timeSeries[selectedDateIndex].date}. Benchmark comparison is ${
    showBenchmark ? "ON" : "OFF"
  }.`;

  const handleActionClick = (actionLabel) => {
    setToast(`Action "${actionLabel}" triggered! (Backend wiring coming soon)`);
    incrementXp(10);
    setTimeout(() => setToast(""), 3000);
  };

  return (
    <div
      style={{
        padding: "2rem 1rem",
        fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
        maxWidth: 900,
        margin: "auto",
        color: "#222",
        lineHeight: 1.5,
      }}
    >
      <h1 tabIndex={0} style={{ fontWeight: "700", fontSize: "2rem", marginBottom: "1rem" }}>
        {title}
      </h1>

      <PersonaToggle
        persona={persona}
        setPersona={setPersona}
        showBenchmark={showBenchmark}
        setShowBenchmark={setShowBenchmark}
      />

      {/* Timeline scroller */}
      <div
        style={{
          display: "flex",
          overflowX: "auto",
          gap: "1rem",
          paddingBottom: "1rem",
          marginBottom: "2rem",
          borderBottom: "1px solid #ddd",
        }}
      >
        {timeSeries.map((point, idx) => (
          <button
            key={point.date}
            onClick={() => setSelectedDateIndex(idx)}
            style={{
              padding: "0.5rem 1rem",
              borderRadius: 6,
              border: idx === selectedDateIndex ? "2px solid #007bff" : "1px solid #ccc",
              background: idx === selectedDateIndex ? "#e7f0fe" : "#f9f9f9",
              cursor: "pointer",
              whiteSpace: "nowrap",
            }}
          >
            {point.date}
          </button>
        ))}
      </div>

      <motion.div
        ref={ref}
        initial="hidden"
        animate={controls}
        style={{ display: "flex", gap: "1rem", marginTop: "1rem", flexWrap: "wrap", justifyContent: "center" }}
      >
        {kpis.map((kpi, index) => (
          <KPICard
            key={kpi.label}
            label={kpi.label}
            value={kpi.value}
            suffix={kpi.suffix}
            benchmark={benchmarks[index]?.value}
            showBenchmark={showBenchmark}
            index={index}
          />
        ))}
      </motion.div>

      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: kpis.length * 0.3 + 0.5, duration: 1 }}
        style={{
          marginTop: "2rem",
          background: "#e8f0fe",
          padding: "1rem 1.5rem",
          borderRadius: 6,
          fontStyle: "italic",
          color: "#333",
          boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
        }}
        tabIndex={0}
        aria-live="polite"
      >
        {narrative}
      </motion.div>

      <section style={{ marginTop: "2rem" }}>
        <h2 tabIndex={0}>Actionable Insights</h2>
        <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
          {insights.map((insight, index) => (
            <InsightCard
              key={insight.id}
              insight={insight}
              index={index}
              onActionClick={handleActionClick}
            />
          ))}
        </div>
      </section>

      <section style={{ marginTop: "2rem" }}>
        <h2 tabIndex={0}>Nudge Engine</h2>
        <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
          {nudges.map((nudge, index) => (
            <NudgeCard key={nudge.id} nudge={nudge} index={index} onActionClick={handleActionClick} />
          ))}
        </div>
      </section>

      <section style={{ marginTop: "2rem" }}>
        <h2 tabIndex={0}>Admin Progress</h2>
        <ProgressBar xp={xp} showCelebration={showCelebration} />
        <p>
          XP: {xp} / 100{" "}
          {showCelebration && (
            <span role="img" aria-label="celebration">
              ðŸŽ‰
            </span>
          )}
        </p>
        <div style={{ display: "flex", gap: 8 }}>
          {badges
            .filter((badge) => xp >= badge.threshold)
            .map((badge) => (
              <div
                key={badge.id}
                style={{
                  padding: "0.25rem 1rem",
                  backgroundColor: "#007bff",
                  color: "white",
                  borderRadius: 12,
                }}
                title={`Badge: ${badge.name}`}
              >
                {badge.name}
              </div>
            ))}
        </div>
      </section>

      {toast && (
        <div
          style={{
            position: "fixed",
            bottom: 20,
            right: 20,
            background: "#333",
            color: "white",
            padding: "0.8rem 1.2rem",
            borderRadius: 4,
            boxShadow: "0 2px 6px rgba(0,0,0,0.3)",
          }}
          role="alert"
          aria-live="assertive"
        >
          {toast}
        </div>
      )}

      
<section style={{ marginTop: "2rem" }}>
  <h2 tabIndex={0}>Applications Over Time</h2>
  <ApplicationsOverTimeChart data={data.timeSeries} />
</section>


      <AdminDataChat />
    </div>
  );
}


---

File name: components\AdminDataChat.jsx

Code:
import React, { useState } from "react";

const fakeResponses = {
  "show me student applications": "Currently, there are 320 student applications this month.",
  "how many active employers": "We have 45 active employers engaged right now.",
  "average time to hire": "The average time to hire is 27 days across all job posts.",
  "job post visibility": "Job post visibility dropped by 12% compared to last month.",
};

export default function AdminDataChat() {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([
    { from: "bot", text: "Hi! Ask me about the Employer & Admin Analytics data." },
  ]);

  const handleSend = () => {
    if (!input.trim()) return;

    const userMessage = { from: "user", text: input.trim() };
    setMessages((msgs) => [...msgs, userMessage]);

    // Simulate backend response delay
    setTimeout(() => {
      const lowerInput = input.toLowerCase();
      const botReply =
        Object.keys(fakeResponses).find((key) => lowerInput.includes(key)) || null;

      const botMessage = {
        from: "bot",
        text: botReply ? fakeResponses[botReply] : "Sorry, I don't have an answer for that yet.",
      };

      setMessages((msgs) => [...msgs, botMessage]);
    }, 1000);

    setInput("");
  };

  return (
    <div
      style={{
        border: "1px solid #ddd",
        borderRadius: 6,
        padding: "1rem",
        maxWidth: 500,
        marginTop: "2rem",
        fontFamily: "Arial, sans-serif",
      }}
    >
      <h3>Admin Data Chat Assistant</h3>
      <div
        style={{
          height: 200,
          overflowY: "auto",
          border: "1px solid #ccc",
          padding: "0.5rem",
          borderRadius: 4,
          marginBottom: "1rem",
          backgroundColor: "#fafafa",
        }}
      >
        {messages.map((msg, idx) => (
          <div
            key={idx}
            style={{
              marginBottom: "0.5rem",
              textAlign: msg.from === "user" ? "right" : "left",
            }}
          >
            <span
              style={{
                display: "inline-block",
                padding: "0.4rem 0.8rem",
                borderRadius: 12,
                backgroundColor: msg.from === "user" ? "#007bff" : "#eee",
                color: msg.from === "user" ? "white" : "black",
                maxWidth: "80%",
              }}
            >
              {msg.text}
            </span>
          </div>
        ))}
      </div>
      <input
        type="text"
        placeholder="Ask a question..."
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") handleSend();
        }}
        style={{ width: "100%", padding: "0.5rem", borderRadius: 4, border: "1px solid #ccc" }}
      />
      <button
        onClick={handleSend}
        style={{
          marginTop: "0.5rem",
          padding: "0.5rem 1rem",
          backgroundColor: "#007bff",
          color: "white",
          border: "none",
          borderRadius: 4,
          cursor: "pointer",
        }}
      >
        Send
      </button>
    </div>
  );
}


---

File name: components\ApplicationsOverTimeChart.jsx

Code:
import React from "react";
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";

export default function ApplicationsOverTimeChart({ data }) {
  return (
    <ResponsiveContainer width="100%" height={250}>
      <LineChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
        <XAxis dataKey="date" />
        <YAxis />
        <Tooltip />
        <Line type="monotone" dataKey="applications" stroke="#8884d8" strokeWidth={2} />
      </LineChart>
    </ResponsiveContainer>
  );
}


---

File name: components\InsightCard.jsx

Code:
import React from "react";
import { motion } from "framer-motion";
import PropTypes from "prop-types";

const insightVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: (i) => ({
    opacity: 1,
    y: 0,
    transition: { delay: i * 0.4, duration: 0.6 },
  }),
};

export default function InsightCard({ insight, index, onActionClick }) {
  return (
    <motion.div
      custom={index}
      variants={insightVariants}
      initial="hidden"
      animate="visible"
      style={{
        padding: "1rem",
        background: "#fff",
        borderRadius: 6,
        boxShadow: "0 1px 4px rgba(0,0,0,0.1)",
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
      }}
      role="region"
      aria-label={insight.text}
    >
      <p style={{ margin: 0 }}>{insight.text}</p>
      <button
        onClick={() => onActionClick(insight.actionLabel)}
        style={{
          background: "#007bff",
          color: "white",
          border: "none",
          borderRadius: 4,
          padding: "0.5rem 1rem",
          cursor: "pointer",
        }}
        aria-label={`Action: ${insight.actionLabel}`}
      >
        {insight.actionLabel}
      </button>
    </motion.div>
  );
}

InsightCard.propTypes = {
  insight: PropTypes.shape({
    id: PropTypes.number.isRequired,
    text: PropTypes.string.isRequired,
    actionLabel: PropTypes.string.isRequired,
  }).isRequired,
  index: PropTypes.number.isRequired,
  onActionClick: PropTypes.func.isRequired,
};


---

File name: components\KPICard.jsx

Code:
import React from "react";
import CountUp from "react-countup";
import { motion } from "framer-motion";
import PropTypes from "prop-types";

const kpiVariants = {
  hidden: { opacity: 0, x: -50 },
  visible: (i) => ({
    opacity: 1,
    x: 0,
    transition: { delay: i * 0.3, duration: 0.6 },
  }),
};

export default function KPICard({ label, value, suffix, benchmark, showBenchmark, index }) {
  return (
    <motion.div
      custom={index}
      variants={kpiVariants}
      initial="hidden"
      animate="visible"
      whileHover={{ scale: 1.05, boxShadow: "0 0 15px rgba(0,123,255,0.6)" }}
      tabIndex={0}
      role="region"
      aria-label={`${label}: ${value}${suffix || ""}`}
      style={{
        background: "#f0f4f8",
        padding: "1rem 2rem",
        borderRadius: 8,
        flex: "1 1 40%",
        boxShadow: "0 2px 6px rgba(0,0,0,0.1)",
        textAlign: "center",
        cursor: "default",
        userSelect: "none",
        outline: "none",
        position: "relative",
      }}
      onFocus={(e) => (e.currentTarget.style.boxShadow = "0 0 20px #007bff")}
      onBlur={(e) => (e.currentTarget.style.boxShadow = "0 2px 6px rgba(0,0,0,0.1)")}
    >
      <h3 style={{ margin: 0, fontSize: "1.5rem" }}>
        <CountUp start={0} end={value} duration={2} suffix={suffix || ""} separator="," />
      </h3>
      <p style={{ margin: 0, color: "#555" }}>{label}</p>

      {showBenchmark && benchmark !== undefined && (
        <div
          style={{
            position: "absolute",
            top: 10,
            right: 10,
            background: "#007bff",
            color: "white",
            borderRadius: 12,
            padding: "0.2rem 0.5rem",
            fontSize: "0.8rem",
          }}
          title={`Benchmark: ${benchmark}${suffix || ""}`}
        >
          <CountUp start={0} end={benchmark} duration={2} suffix={suffix || ""} separator="," />
        </div>
      )}
    </motion.div>
  );
}

KPICard.propTypes = {
  label: PropTypes.string.isRequired,
  value: PropTypes.number.isRequired,
  suffix: PropTypes.string,
  benchmark: PropTypes.number,
  showBenchmark: PropTypes.bool,
  index: PropTypes.number,
};


---

File name: components\NudgeCard.jsx

Code:
import React from "react";
import { motion } from "framer-motion";
import PropTypes from "prop-types";

const nudgeVariants = {
  hidden: { opacity: 0, scale: 0.95 },
  visible: (i) => ({
    opacity: 1,
    scale: 1,
    transition: { delay: i * 0.3, duration: 0.5 },
  }),
};

export default function NudgeCard({ nudge, index, onActionClick }) {
  return (
    <motion.div
      custom={index}
      variants={nudgeVariants}
      initial="hidden"
      animate="visible"
      style={{
        padding: "1rem",
        background: "#fff9e6",
        borderRadius: 6,
        boxShadow: "0 1px 4px rgba(0,0,0,0.1)",
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        border: "1px solid #f5c518",
      }}
      role="region"
      aria-label={nudge.text}
    >
      <p style={{ margin: 0 }}>{nudge.text}</p>
      <button
        onClick={() => onActionClick(nudge.actionLabel)}
        style={{
          background: "#f5c518",
          color: "#333",
          border: "none",
          borderRadius: 4,
          padding: "0.5rem 1rem",
          cursor: "pointer",
        }}
        aria-label={`Action: ${nudge.actionLabel}`}
      >
        {nudge.actionLabel}
      </button>
    </motion.div>
  );
}

NudgeCard.propTypes = {
  nudge: PropTypes.shape({
    id: PropTypes.number.isRequired,
    text: PropTypes.string.isRequired,
    actionLabel: PropTypes.string.isRequired,
  }).isRequired,
  index: PropTypes.number.isRequired,
  onActionClick: PropTypes.func.isRequired,
};


---

File name: components\PersonaToggle.jsx

Code:
import React from "react";
import PropTypes from "prop-types";

export default function PersonaToggle({ persona, setPersona, showBenchmark, setShowBenchmark }) {
  return (
    <div
      style={{
        marginBottom: "1rem",
        display: "flex",
        flexWrap: "wrap",
        alignItems: "center",
        gap: "1rem",
      }}
    >
      <label htmlFor="persona-select" style={{ fontWeight: "600" }}>
        Select Persona:
      </label>
      <select
        id="persona-select"
        value={persona}
        onChange={(e) => setPersona(e.target.value)}
        style={{
          padding: "0.3rem 0.6rem",
          fontSize: "1rem",
          borderRadius: 4,
          border: "1px solid #ccc",
          outlineOffset: 2,
        }}
        aria-label="Select admin persona"
      >
        <option value="employer">Employer</option>
        <option value="universityAdmin">University Admin</option>
        <option value="careerCenterStaff">Career Center Staff</option>
      </select>

      <label
        htmlFor="benchmark-toggle"
        style={{ fontWeight: "600", cursor: "pointer", userSelect: "none" }}
      >
        <input
          type="checkbox"
          id="benchmark-toggle"
          checked={showBenchmark}
          onChange={() => setShowBenchmark(!showBenchmark)}
          style={{ marginRight: 6, cursor: "pointer" }}
          aria-checked={showBenchmark}
          role="switch"
        />
        Show Benchmark Comparison
      </label>
    </div>
  );
}

PersonaToggle.propTypes = {
  persona: PropTypes.string.isRequired,
  setPersona: PropTypes.func.isRequired,
  showBenchmark: PropTypes.bool.isRequired,
  setShowBenchmark: PropTypes.func.isRequired,
};


---

File name: components\ProgressBar.jsx

Code:
import React from "react";
import PropTypes from "prop-types";
import { motion } from "framer-motion";

export default function ProgressBar({ xp, showCelebration }) {
  return (
    <div
      style={{
        background: "#ddd",
        borderRadius: 20,
        height: 24,
        width: "100%",
        overflow: "hidden",
        marginBottom: 12,
        position: "relative",
      }}
      role="progressbar"
      aria-valuemin={0}
      aria-valuemax={100}
      aria-valuenow={xp}
      aria-label="Admin experience progress"
    >
      <motion.div
        style={{
          height: "100%",
          backgroundColor: showCelebration ? "#ffd700" : "#007bff",
          borderRadius: 20,
          width: `${Math.min(xp, 100)}%`,
        }}
        animate={{ width: `${Math.min(xp, 100)}%` }}
        transition={{ duration: 0.5 }}
      />
    </div>
  );
}

ProgressBar.propTypes = {
  xp: PropTypes.number.isRequired,
  showCelebration: PropTypes.bool,
};


---

File name: hooks\useEmployerAdminMockData.js

Code:
import { useState, useEffect } from "react";
import dummyAdminStats from "../mock/dummyAdminStats.json";

export default function useEmployerAdminMockData() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Simulate async loading delay
    const loadData = async () => {
      // You can simulate a delay here if you want
      setData(dummyAdminStats);
    };

    loadData();
  }, []);

  return data;
}


---

File name: index.jsx

Code:
import React from "react";
import ReactDOM from "react-dom/client";
import AdminAnalytics from "./components/AdminAnalytics";

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(
  <React.StrictMode>
    <AdminAnalytics />
  </React.StrictMode>
);


---

File name: mock\dummyAdminStats.json

Code:
{
  "timeSeries": [
    {
      "date": "2025-01-01",
      "applications": 250,
      "activeEmployers": 38,
      "jobPosts": 95
    },
    {
      "date": "2025-02-01",
      "applications": 270,
      "activeEmployers": 40,
      "jobPosts": 100
    },
    {
      "date": "2025-03-01",
      "applications": 280,
      "activeEmployers": 42,
      "jobPosts": 110
    }
  ],
  "insights": [
    {
      "id": 1,
      "category": "Engagement",
      "text": "Student engagement has increased by 12% in the last month.",
      "urgency": "low"
    },
    {
      "id": 2,
      "category": "Job Posts",
      "text": "Job post visibility is down 8%.",
      "urgency": "high"
    }
  ]
}


---

File name: README.md

Code:
# Employer & Admin Analytics (Part 6)

This folder contains the frontend-only Employer & Admin Analytics module for the Career OS suite.

## Structure

- components/ â€” React components
- hooks/ â€” Custom hooks, including mock data provider
- mock/ â€” Mock data JSON files
- contexts/ â€” Placeholder for future global state context
- utils/ â€” Utility functions for charts, data formatting
- index.jsx â€” Root entry point

## Next Steps

- Implement leapfrog frontend features as per plan
- Expand mock data and visualization components
- Add admin persona toggles and insights feed


---

File name: structure-backups\project-structure-part1.txt

Code:
â”œâ”€â”€ backupProjectCode.js
â”œâ”€â”€ backupProjectStructure.js
â”œâ”€â”€ code-backups
â”‚   â””â”€â”€ code-bundle-1.txt
â”œâ”€â”€ Commands to run backup scripts.txt
â”œâ”€â”€ components
â”‚   â”œâ”€â”€ AdminAnalytics.jsx
â”‚   â”œâ”€â”€ AdminDataChat.jsx
â”‚   â”œâ”€â”€ ApplicationsOverTimeChart.jsx
â”‚   â”œâ”€â”€ InsightCard.jsx
â”‚   â”œâ”€â”€ KPICard.jsx
â”‚   â”œâ”€â”€ NudgeCard.jsx
â”‚   â”œâ”€â”€ PersonaToggle.jsx
â”‚   â””â”€â”€ ProgressBar.jsx
â”œâ”€â”€ contexts
â”œâ”€â”€ hooks
â”‚   â””â”€â”€ useEmployerAdminMockData.js
â”œâ”€â”€ index.jsx
â”œâ”€â”€ mock
â”‚   â””â”€â”€ dummyAdminStats.json
â”œâ”€â”€ README.md
â”œâ”€â”€ structure-backups
â”‚   â””â”€â”€ project-structure-part1.txt
â””â”€â”€ utils

---

